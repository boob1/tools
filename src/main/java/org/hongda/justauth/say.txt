1.通过justauth实现第三方登录，gitee,QQ，微信等
第一引入依赖：
 <!--justauth实现第三个放登录-->
        <dependency>
            <groupId>com.xkcoding.justauth</groupId>
            <artifactId>justauth-spring-boot-starter</artifactId>
            <version>1.4.0</version>
        </dependency>

第二配置application.yml文件：
 justauth:
   enabled: true
   type:
     GITEE:
       client-id: 61977df44510af284a0af469e00bb7d04e71bca90071498e3a950afa9b7cfc66  # 应用ID
       client-secret: 629a042c918264063890e7f184851b964d60c6bfb043bef1b67b129be961c8b0  # 应用Secret
       redirect-uri: http://127.0.0.1:8082/oauth/gitee/callback # 回调地址
   cache:
     type: default

如果想通过其他三方登录，在type下配置QQ、微信等，在QQ、微信官网申请应用，获取应用ID和应用Secret，配置回调地址即可。




第三写controller

访问方式：

如果配置的是gitee;访问路径：http://127.0.0.1:8082/oauth/login/gitee
如果配置的是qq;访问路径：http://127.0.0.1:8082/oauth/login/qq
如果配置的是WECHAT_OPEN;访问路径：http://127.0.0.1:8082/oauth/login/WECHAT_OPEN


下面是各个平台
switch (authDefaultSource) {
                case GITHUB:
                    return new AuthGithubRequest(config, this.authStateCache);
                case WEIBO:
                    return new AuthWeiboRequest(config, this.authStateCache);
                case GITEE:
                    return new AuthGiteeRequest(config, this.authStateCache);
                case DINGTALK:
                    return new AuthDingTalkRequest(config, this.authStateCache);
                case DINGTALK_ACCOUNT:
                    return new AuthDingTalkAccountRequest(config, this.authStateCache);
                case BAIDU:
                    return new AuthBaiduRequest(config, this.authStateCache);
                case CSDN:
                    return new AuthCsdnRequest(config, this.authStateCache);
                case CODING:
                    return new AuthCodingRequest(config, this.authStateCache);
                case OSCHINA:
                    return new AuthOschinaRequest(config, this.authStateCache);
                case ALIPAY:
                    return new AuthAlipayRequest(config, this.authStateCache);
                case QQ:
                    return new AuthQqRequest(config, this.authStateCache);
                case WECHAT_OPEN:
                    return new AuthWeChatOpenRequest(config, this.authStateCache);
                case WECHAT_MP:
                    return new AuthWeChatMpRequest(config, this.authStateCache);
                case WECHAT_ENTERPRISE:
                    return new AuthWeChatEnterpriseQrcodeRequest(config, this.authStateCache);
                case WECHAT_ENTERPRISE_WEB:
                    return new AuthWeChatEnterpriseWebRequest(config, this.authStateCache);
                case TAOBAO:
                    return new AuthTaobaoRequest(config, this.authStateCache);
                case GOOGLE:
                    return new AuthGoogleRequest(config, this.authStateCache);
                case FACEBOOK:
                    return new AuthFacebookRequest(config, this.authStateCache);
                case DOUYIN:
                    return new AuthDouyinRequest(config, this.authStateCache);
                case LINKEDIN:
                    return new AuthLinkedinRequest(config, this.authStateCache);
                case MICROSOFT:
                    return new AuthMicrosoftRequest(config, this.authStateCache);
                case MI:
                    return new AuthMiRequest(config, this.authStateCache);
                case TOUTIAO:
                    return new AuthToutiaoRequest(config, this.authStateCache);
                case TEAMBITION:
                    return new AuthTeambitionRequest(config, this.authStateCache);
                case RENREN:
                    return new AuthRenrenRequest(config, this.authStateCache);
                case PINTEREST:
                    return new AuthPinterestRequest(config, this.authStateCache);
                case STACK_OVERFLOW:
                    return new AuthStackOverflowRequest(config, this.authStateCache);
                case HUAWEI:
                    return new AuthHuaweiRequest(config, this.authStateCache);
                case GITLAB:
                    return new AuthGitlabRequest(config, this.authStateCache);
                case KUJIALE:
                    return new AuthKujialeRequest(config, this.authStateCache);
                case ELEME:
                    return new AuthElemeRequest(config, this.authStateCache);
                case MEITUAN:
                    return new AuthMeituanRequest(config, this.authStateCache);
                case TWITTER:
                    return new AuthTwitterRequest(config, this.authStateCache);
                case FEISHU:
                    return new AuthFeishuRequest(config, this.authStateCache);
                case JD:
                    return new AuthJdRequest(config, this.authStateCache);
                case ALIYUN:
                    return new AuthAliyunRequest(config, this.authStateCache);
                case XMLY:
                    return new AuthXmlyRequest(config, this.authStateCache);
                case AMAZON:
                    return new AuthAmazonRequest(config, this.authStateCache);
                case SLACK:
                    return new AuthSlackRequest(config, this.authStateCache);
                case LINE:
                    return new AuthLineRequest(config, this.authStateCache);
                case OKTA:
                    return new AuthOktaRequest(config, this.authStateCache);
                default:
                    return null;
            }
